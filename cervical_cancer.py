# -*- coding: utf-8 -*-
"""cervical cancer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12hLIGsHrVojbT8tffHgY-SXI13-IdhLn
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df= pd.read_csv('/content/cervical-cancer_csv.csv')

df.head()

df.info()

df.describe()

df.isnull().sum()

df.duplicated().sum()

df.nunique()

plt.figure(figsize = (10, 6))
sns.heatmap(df.corr())
plt.show()



df.mean()

df  = df.fillna(df.mean())

df.isnull().sum()

df.hist(bins = 10, figsize = (30,30), color='maroon')
plt.show()

df1  = df.drop('Biopsy', axis = 1)

df1.head()

df1.corrwith(df['Biopsy']).plot.bar(
    title = 'Correlation With Biopsy',
    figsize = (12, 5))

X= df.drop('Biopsy', axis=1)
y= df['Biopsy']

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()

X = scaler.fit_transform(X)

X

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2)

import xgboost as xgb
from sklearn.metrics import confusion_matrix, classification_report
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import explained_variance_score,mean_absolute_error,r2_score
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.metrics import accuracy_score

lgr= LogisticRegression()
lgr.fit(X_train, y_train)

y_pred= lgr.predict(X_test)

accuracy_lgr = accuracy_score(y_test, y_pred)
accuracy_lgr

print(classification_report(y_test, y_pred))

confusion_matrix = confusion_matrix(y_test, y_pred)
confusion_matrix

rf= RandomForestClassifier()
rf.fit(X_train, y_train)

y_pred2= rf.predict(X_test)

accuracy_rf = accuracy_score(y_test, y_pred2)
accuracy_rf

print(classification_report(y_test, y_pred2))

dtc= DecisionTreeClassifier()
dtc.fit(X_train, y_train)

y_pred3= dtc.predict(X_test)

accuracy_dtc = accuracy_score(y_test, y_pred3)
accuracy_dtc

print(classification_report(y_test, y_pred3))

svc= SVC()
svc.fit(X_train,y_train)

y_pred4= svc.predict(X_test)

accuracy_svc = accuracy_score(y_test, y_pred4)
accuracy_svc

print(classification_report(y_test, y_pred4))

gb= GradientBoostingClassifier()
gb.fit(X_train, y_train)

y_pred5= gb.predict(X_test)

accuracy_gb = accuracy_score(y_test, y_pred5)
accuracy_gb

print(classification_report(y_test, y_pred5))

knn= KNeighborsClassifier(n_neighbors=100)
knn.fit(X_train, y_train)

y_pred6= knn.predict(X_test)

accuracy_knn = accuracy_score(y_test, y_pred6)
accuracy_knn

print(classification_report(y_test, y_pred6))

